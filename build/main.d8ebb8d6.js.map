{"version":3,"sources":["node_modules/splitting/dist/splitting.js","scripts/main.js"],"names":["document","addEventListener","nabei","getElementById","titleStart","titleEnd","display","getSingleElement","container","target","by","classList","add","newText","createElement","innerText","randomItem","nabeisms","removeChild","appendChild","className","getElementsByClassName","arr","length","Math","random"],"mappings":"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","file":"main.d8ebb8d6.js","sourceRoot":"..","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Splitting = factory());\n}(this, (function () { 'use strict';\n\nvar root = document;\nvar createText = root.createTextNode.bind(root);\n\n/**\n * # setProperty\n * Apply a CSS var\n * @param el{HTMLElement} \n * @param varName {string} \n * @param value {string|number}  \n */\nfunction setProperty(el, varName, value) {\n    el.style.setProperty(varName, value);\n} \n\n/**\n * \n * @param {Node} el \n * @param {Node} child \n */\nfunction appendChild(el, child) {\n  return el.appendChild(child);\n}\n\nfunction createElement(parent, key, text, whitespace) {\n  var el = root.createElement('span');\n  key && (el.className = key); \n  if (text) { \n      !whitespace && el.setAttribute(\"data-\" + key, text);\n      el.textContent = text; \n  }\n  return (parent && appendChild(parent, el)) || el;\n}\n\nfunction getData(el, key) {\n  return el.getAttribute(\"data-\" + key)\n}\n\n/**\n * \n * @param e {import('../types').Target} \n * @param parent {HTMLElement}\n * @returns {HTMLElement[]}\n */\nfunction $(e, parent) {\n    return !e || e.length == 0\n        ? // null or empty string returns empty array\n          []\n        : e.nodeName\n            ? // a single element is wrapped in an array\n              [e]\n            : // selector and NodeList are converted to Element[]\n              [].slice.call(e[0].nodeName ? e : (parent || root).querySelectorAll(e));\n}\n\n/**\n * Creates and fills an array with the value provided\n * @template {T}\n * @param {number} len\n * @param {() => T} valueProvider\n * @return {T}\n */\nfunction Array2D(len) {\n    var a = [];\n    for (; len--; ) {\n        a[len] = [];\n    }\n    return a;\n}\n\nfunction each(items, fn) {\n    items && items.some(fn);\n}\n\nfunction selectFrom(obj) {\n    return function (key) {\n        return obj[key];\n    }\n}\n\n/**\n * # Splitting.index\n * Index split elements and add them to a Splitting instance.\n *\n * @param element {HTMLElement}\n * @param key {string}\n * @param items {HTMLElement[] | HTMLElement[][]}\n */\nfunction index(element, key, items) {\n    var prefix = '--' + key;\n    var cssVar = prefix + \"-index\";\n\n    each(items, function (items, i) {\n        if (Array.isArray(items)) {\n            each(items, function(item) {\n                setProperty(item, cssVar, i);\n            });\n        } else {\n            setProperty(items, cssVar, i);\n        }\n    });\n\n    setProperty(element, prefix + \"-total\", items.length);\n}\n\n/**\n * @type {Record<string, import('./types').ISplittingPlugin>}\n */\nvar plugins = {};\n\n/**\n * @param by {string}\n * @param parent {string}\n * @param deps {string[]}\n * @return {string[]}\n */\nfunction resolvePlugins(by, parent, deps) {\n    // skip if already visited this dependency\n    var index = deps.indexOf(by);\n    if (index == -1) {\n        // if new to dependency array, add to the beginning\n        deps.unshift(by);\n\n        // recursively call this function for all dependencies\n        each(plugins[by].depends, function(p) {\n            resolvePlugins(p, by, deps);\n        });\n    } else {\n        // if this dependency was added already move to the left of\n        // the parent dependency so it gets loaded in order\n        var indexOfParent = deps.indexOf(parent);\n        deps.splice(index, 1);\n        deps.splice(indexOfParent, 0, by);\n    }\n    return deps;\n}\n\n/**\n * Internal utility for creating plugins... essentially to reduce\n * the size of the library\n * @param {string} by \n * @param {string} key \n * @param {string[]} depends \n * @param {Function} split \n * @returns {import('./types').ISplittingPlugin}\n */\nfunction createPlugin(by, depends, key, split) {\n    return {\n        by: by,\n        depends: depends,\n        key: key,\n        split: split\n    }\n}\n\n/**\n *\n * @param by {string}\n * @returns {import('./types').ISplittingPlugin[]}\n */\nfunction resolve(by) {\n    return resolvePlugins(by, 0, []).map(selectFrom(plugins));\n}\n\n/**\n * Adds a new plugin to splitting\n * @param opts {import('./types').ISplittingPlugin}\n */\nfunction add(opts) {\n    plugins[opts.by] = opts;\n}\n\n/**\n * # Splitting.split\n * Split an element's textContent into individual elements\n * @param el {Node} Element to split\n * @param key {string}\n * @param splitOn {string}\n * @param includeSpace {boolean}\n * @returns {HTMLElement[]}\n */\nfunction splitText(el, key, splitOn, includePrevious, preserveWhitespace) {\n    // Combine any strange text nodes or empty whitespace.\n    el.normalize();\n\n    // Use fragment to prevent unnecessary DOM thrashing.\n    var elements = [];\n    var F = document.createDocumentFragment();\n\n    if (includePrevious) {\n        elements.push(el.previousSibling);\n    }\n\n    var allElements = [];\n    $(el.childNodes).some(function(next) {\n        if (next.tagName && !next.hasChildNodes()) {\n            // keep elements without child nodes (no text and no children)\n            allElements.push(next);\n            return;\n        }\n        // Recursively run through child nodes\n        if (next.childNodes && next.childNodes.length) {\n            allElements.push(next);\n            elements.push.apply(elements, splitText(next, key, splitOn, includePrevious, preserveWhitespace));\n            return;\n        }\n\n        // Get the text to split, trimming out the whitespace\n        /** @type {string} */\n        var wholeText = next.wholeText || '';\n        var contents = wholeText.trim();\n\n        // If there's no text left after trimming whitespace, continue the loop\n        if (contents.length) {\n            // insert leading space if there was one\n            if (wholeText[0] === ' ') {\n                allElements.push(createText(' '));\n            }\n            // Concatenate the split text children back into the full array\n            each(contents.split(splitOn), function(splitText, i) {\n                if (i && preserveWhitespace) {\n                    allElements.push(createElement(F, \"whitespace\", \" \", preserveWhitespace));\n                }\n                var splitEl = createElement(F, key, splitText);\n                elements.push(splitEl);\n                allElements.push(splitEl);\n            }); \n            // insert trailing space if there was one\n            if (wholeText[wholeText.length - 1] === ' ') {\n                allElements.push(createText(' '));\n            }\n        }\n    });\n\n    each(allElements, function(el) {\n        appendChild(F, el);\n    });\n\n    // Clear out the existing element\n    el.innerHTML = \"\";\n    appendChild(el, F);\n    return elements;\n}\n\n/** an empty value */\nvar _ = 0;\n\nfunction copy(dest, src) {\n    for (var k in src) {\n        dest[k] = src[k];\n    }\n    return dest;\n}\n\nvar WORDS = 'words';\n\nvar wordPlugin = createPlugin(\n    /*by: */ WORDS,\n    /*depends: */ _,\n    /*key: */ 'word', \n    /*split: */ function(el) {\n        return splitText(el, 'word', /\\s+/, 0, 1)\n    }\n);\n\nvar CHARS = \"chars\";\n\nvar charPlugin = createPlugin(\n    /*by: */ CHARS,\n    /*depends: */ [WORDS],\n    /*key: */ \"char\", \n    /*split: */ function(el, options, ctx) {\n        var results = [];\n\n        each(ctx[WORDS], function(word, i) {\n            results.push.apply(results, splitText(word, \"char\", \"\", options.whitespace && i));\n        });\n\n        return results;\n    }\n);\n\n/**\n * # Splitting\n * \n * @param opts {import('./types').ISplittingOptions} \n */\nfunction Splitting (opts) {\n  opts = opts || {};\n  var key = opts.key;\n\n  return $(opts.target || '[data-splitting]').map(function(el) {\n    var ctx = el['🍌'];  \n    if (!opts.force && ctx) {\n      return ctx;\n    }\n\n    ctx = el['🍌'] = { el: el };\n    var items = resolve(opts.by || getData(el, 'splitting') || CHARS);\n    var opts2 = copy({}, opts);\n    each(items, function(plugin) {\n      if (plugin.split) {\n        var pluginBy = plugin.by;\n        var key2 = (key ? '-' + key : '') + plugin.key;\n        var results = plugin.split(el, opts2, ctx);\n        key2 && index(el, key2, results);\n        ctx[pluginBy] = results;\n        el.classList.add(pluginBy);\n      } \n    });\n\n    el.classList.add('splitting');\n    return ctx;\n  })\n}\n\n/**\n * # Splitting.html\n * \n * @param opts {import('./types').ISplittingOptions}\n */\nfunction html(opts) {\n  opts = opts || {};\n  var parent = opts.target =  createElement();\n  parent.innerHTML = opts.content;\n  Splitting(opts);\n  return parent.outerHTML\n}\n\nSplitting.html = html;\nSplitting.add = add;\n\nfunction detectGrid(el, options, side) {\n    var items = $(options.matching || el.children, el);\n    var c = {};\n\n    each(items, function(w) {\n        var val = Math.round(w[side]);\n        (c[val] || (c[val] = [])).push(w);\n    });\n\n    return Object.keys(c).map(Number).sort(byNumber).map(selectFrom(c));\n}\n\nfunction byNumber(a, b) {\n    return a - b;\n}\n\nvar linePlugin = createPlugin(\n    /*by: */ 'lines',\n    /*depends: */ [WORDS],\n    /*key: */ 'line',\n    /*split: */ function(el, options, ctx) {\n      return detectGrid(el, { matching: ctx[WORDS] }, 'offsetTop')\n    }\n);\n\nvar itemPlugin = createPlugin(\n    /*by: */ 'items',\n    /*depends: */ _,\n    /*key: */ 'item', \n    /*split: */ function(el, options) {\n        return $(options.matching || el.children, el)\n    }\n);\n\nvar rowPlugin = createPlugin(\n    /*by: */ 'rows',\n    /*depends: */ _,\n    /*key: */ 'row', \n    /*split: */ function(el, options) {\n        return detectGrid(el, options, \"offsetTop\");\n    }\n);\n\nvar columnPlugin = createPlugin(\n    /*by: */ 'cols',\n    /*depends: */ _,\n    /*key: */ \"col\", \n    /*split: */ function(el, options) {\n        return detectGrid(el, options, \"offsetLeft\");\n    }\n);\n\nvar gridPlugin = createPlugin(\n    /*by: */ 'grid',\n    /*depends: */ ['rows', 'cols']\n);\n\nvar LAYOUT = \"layout\";\n\nvar layoutPlugin = createPlugin(\n    /*by: */ LAYOUT,\n    /*depends: */ _,\n    /*key: */ _,\n    /*split: */ function(el, opts) {\n        // detect and set options\n        var rows =  opts.rows = +(opts.rows || getData(el, 'rows') || 1);\n        var columns = opts.columns = +(opts.columns || getData(el, 'columns') || 1);\n\n        // Seek out the first <img> if the value is true \n        opts.image = opts.image || getData(el, 'image') || el.currentSrc || el.src;\n        if (opts.image) {\n            var img = $(\"img\", el)[0];\n            opts.image = img && (img.currentSrc || img.src);\n        }\n\n        // add optional image to background\n        if (opts.image) {\n            setProperty(el, \"background-image\", \"url(\" + opts.image + \")\");\n        }\n\n        var totalCells = rows * columns;\n        var elements = [];\n\n        var container = createElement(_, \"cell-grid\");\n        while (totalCells--) {\n            // Create a span\n            var cell = createElement(container, \"cell\");\n            createElement(cell, \"cell-inner\");\n            elements.push(cell);\n        }\n\n        // Append elements back into the parent\n        appendChild(el, container);\n\n        return elements;\n    }\n);\n\nvar cellRowPlugin = createPlugin(\n    /*by: */ \"cellRows\",\n    /*depends: */ [LAYOUT],\n    /*key: */ \"row\",\n    /*split: */ function(el, opts, ctx) {\n        var rowCount = opts.rows;\n        var result = Array2D(rowCount);\n\n        each(ctx[LAYOUT], function(cell, i, src) {\n            result[Math.floor(i / (src.length / rowCount))].push(cell);\n        });\n\n        return result;\n    }\n);\n\nvar cellColumnPlugin = createPlugin(\n    /*by: */ \"cellColumns\",\n    /*depends: */ [LAYOUT],\n    /*key: */ \"col\",\n    /*split: */ function(el, opts, ctx) {\n        var columnCount = opts.columns;\n        var result = Array2D(columnCount);\n\n        each(ctx[LAYOUT], function(cell, i) {\n            result[i % columnCount].push(cell);\n        });\n\n        return result;\n    }\n);\n\nvar cellPlugin = createPlugin(\n    /*by: */ \"cells\",\n    /*depends: */ ['cellRows', 'cellColumns'],\n    /*key: */ \"cell\", \n    /*split: */ function(el, opt, ctx) { \n        // re-index the layout as the cells\n        return ctx[LAYOUT];\n    }\n);\n\n// install plugins\n// word/char plugins\nadd(wordPlugin);\nadd(charPlugin);\nadd(linePlugin);\n// grid plugins\nadd(itemPlugin);\nadd(rowPlugin);\nadd(columnPlugin);\nadd(gridPlugin);\n// cell-layout plugins\nadd(layoutPlugin);\nadd(cellRowPlugin);\nadd(cellColumnPlugin);\nadd(cellPlugin);\n\nreturn Splitting;\n\n})));\n","import Splitting from \"splitting\";\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const nabei = document.getElementById('nabei');\n  const titleStart = document.getElementById('title-start');\n  const titleEnd = document.getElementById('title-end');\n  let display = () => getSingleElement('nabei-text');\n  const container = document.getElementById('text');\n  Splitting({ target: nabei, by: 'chars' })\n  Splitting({ target: titleStart, by: 'words' })\n  Splitting({ target: titleEnd, by: 'chars' })\n  Splitting({ target: display() });\n  document.getElementById('title-middle').classList.add('animate');\n  document.getElementById('more').addEventListener('click', () => {\n    const newText = document.createElement('p');\n    newText.innerText = randomItem(nabeisms);\n\n    Splitting({ target: newText });\n    newText.classList.add('nabei-text');\n    container.removeChild(display());\n    container.appendChild(newText);\n    newText.classList.add('sliding');\n  })\n});\nconst getSingleElement = (className) => document.getElementsByClassName(className)[0];\nconst randomItem = (arr) => arr[arr.length * Math.random() | 0];\nconst nabeisms = [\n  'when the bus driver see you running for it but he still drives off',\n  'when you finally match with someone on tinder and it is your sister',\n  'when the grab driver cancels on you and you are literally 1min late',\n  'when you friend is late and he says he is on the way, but he is actually on the way out of his bed',\n  'when you have the winning 4d numbers, but you bought the wrong date',\n  'when it rains on your wedding day',\n  'when a fire station burns down',\n  'when a member of PETA wears leather shoes',\n  'when your pilot has a fear of heights',\n  'when someone complains about you complaining',\n  \"when the cobbler's kids can't afford shoes\"\n]"]}